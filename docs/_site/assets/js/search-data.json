{
  "1": {
    "id": "1",
    "title": "Changelog",
    "content": "Here should be link to the Changelog-File on Github (we haven’t one yet)",
    "url": "http://localhost:4000/docs/changelog.html",
    "relUrl": "/docs/changelog.html"
  },
  "2": {
    "id": "2",
    "title": "Contribution Guide",
    "content": ":hammer: Contribution Guide :hammer_and_wrench: Work Flow to contribute Create a new Branch. Make some changes and develop a cool new feature or fix a Bug. In order to commit run npm run commit to run the interactive Commit utility. Create a Pull Request from your Branch. Wait for approval from one of the maintainers. If you need a tutorial about important git commands look here.",
    "url": "http://localhost:4000/docs/development-guides/contribution.html",
    "relUrl": "/docs/development-guides/contribution.html"
  },
  "3": {
    "id": "3",
    "title": "Development Guides",
    "content": "",
    "url": "http://localhost:4000/docs/development-guides/general-guide",
    "relUrl": "/docs/development-guides/general-guide"
  },
  "4": {
    "id": "4",
    "title": "General Guide",
    "content": ":small_red_triangle: General Guide :small_red_triangle: :open_file_folder: Project Structure In the following can you find the structure of the application. We want to describe the different parts in a later documentation. It is possible that the structure is not up to date. * Phonebook (Root) |-- ci: Some CI specific stuff |-- docs: The documentation of the project |-- e2e: End to End Tests |-- src: The complete Angular app | |-- app: The Angular sources | | |-- shared | | | |-- models | | | | |-- classes | | | | |-- enumerables | | | |-- mocks | | | |-- components | | | |-- dialogs | | |-- modules | | |-- pages | |-- assets: Assets of the app | |-- environments: The Environments the app can be build for | |-- styles: Some global Styles for the app, as well as scss partials :triangular_ruler: Code scaffolding To generate a new component run: ng generate component component-name You can also use: ng generate directive|pipe|service|class|guard|interface|enum|module :floppy_disk: State Management We are using NGXS for transferring states. To get more information how NGXS works and how we use it check out this link. Examples about how we use NGXS in the application are in work. How to use Feature Flags We are using Feature Flags for faster Development Cycles and easier Code Integration. If you don’t really know what Feature Flags mean take a look at wikipedia. There are several states: -1 - Disabled 0 - Disabled by default, but can be enabled by the user 1-99 - A/B Testing (% of the users enabled) 100 - Enabled At the following link can you edit the Feature Flags for Production Environment. To use them InCode you can either subscribe to the feature-flag.service: // We are using first() in order to automatically cancel the subscription after receiving the first value. featureFlagService .get(&#39;flagname&#39;) .pipe(first()) .subscribe(isFlagActivated =&gt; { if (isFlagActivated) { // Code that will be executed if the Feature Flag &#39;flagname&#39; is enabled. } }); or use the feature-flag.directive: &lt;div *featureFlag=&quot;&#39;flagname&#39;&quot;&gt; &lt;!-- This will only be rendered if Feature Flag &#39;flagname&#39; is enabled. --&gt; &lt;/div&gt; Observables You should unsubscribe from observables if your component gets destroyed. This can be quite some work. In order to make it easier we have used a little helper function: // OnDestroy has to be implemented. import { Component, OnDestroy, OnInit } from &#39;@angular/core&#39;; // Import the Function to unsubscribe if the Component gets destroyed. import { untilComponentDestroyed } from &#39;ng2-rx-componentdestroyed&#39;; @Component({ selector: &#39;app-example&#39;, templateUrl: &#39;./example.component.html&#39;, styleUrls: [&#39;./example.component.scss&#39;] }) export class SearchComponent implements OnInit, OnDestroy { public ngOnInit() { Observable.interval(1000) .pipe( untilComponentDestroyed(this) // &lt; magic is here! ) .subscribe(console.log); } public ngOnDestroy() { // this function has to be in the component, although it can be empty. } }",
    "url": "http://localhost:4000/docs/development-guides/general-guide.html",
    "relUrl": "/docs/development-guides/general-guide.html"
  },
  "5": {
    "id": "5",
    "title": "Getting Started",
    "content": ":small_red_triangle: Getting Started :small_red_triangle: We recommmend using VSCode as IDE, however you can also use your favorite IDE. Here can you find cool VS Code Plugins which we use CSS Peak Angular 8 Snippets Angular Language Service TSLint NPM Prettier Git Lens At this time only the frontend is full Open Source. In the following steps do you learn how to setup the frontend of the Phonebook. Steps how you can contribute to the backend can you find on your organization page. If you have not many experience about the named techniques you can click to find more resources. This part will be regurlarly expanded. If you have other project related resources. Edit this file and start a pull request. Angular Tutorial: click Git Tutorial: click NGXS Tutorial: click Quickstart with Node :green_book: Install the current Version of Node LTS and GIT Optional: If you need to setup Proxies click follow the steps below. (You only need to setup proxies if you’re behind a corporate proxy.) npm config set proxy http://proxy.example.de:8080 npm config set https-proxy http://proxy.example.de:8080 git config --global http.proxy http://proxy.example.de:8080 git config --global https.proxy http://proxy.example.de:8080 Setup the Project: cd /the/place/you/want/to/clone/to git clone https://github.com/T-Systems-MMS/phonebook cd phonebook/Phonebook.Frontend # Install Angular/cli npm install -g @angular/cli # Install the project dependencies npm install # Run the backend mock before (only possible if you&#39;re a part of MMS) docker run -p 8080:80 tsystemsmms/build:mock-backend # Run the project npm run start -- --open Point the Angular Proxy in the proxy.conf.json to your backend Server. :star: You’re ready to develop the Phonebook Application! Start by reading the general Guide to get an overview. General Guide In order to circumvent Bugs coming from unsecured Websites please add the certificate used on the localhost page to your ‘Trusted Root Certification Authorities’. (For Windows: In Chrome just click at the top ‘Not secure’ then click on Certificate, Details, Copy to File, save it anywhere and add the certificate to your ‘Trusted Root Certification Authorities’. )",
    "url": "http://localhost:4000/docs/getting-started.html",
    "relUrl": "/docs/getting-started.html"
  },
  "6": {
    "id": "6",
    "title": "Good to know",
    "content": ":small_red_triangle: Good to know :small_red_triangle: Current Bugs and Workarounds in this Projects Starting the app undefined is not a function This has to do with angular Lazy Loading Modules: https://github.com/angular/angular-cli/issues/9825 If there is an Error on the first time Building the bundle the error: undefined is not a Function will be thrown with no link to any files. Workaround Fix the error and restart the build",
    "url": "http://localhost:4000/docs/good-to-know/good-to-know.html",
    "relUrl": "/docs/good-to-know/good-to-know.html"
  },
  "7": {
    "id": "7",
    "title": "Introduction",
    "content": ":small_red_triangle: T-Systems MMS Phonebook :small_red_triangle: :question: What is the Phonebook? The Phonebook is a community project for us, from us and everybody is welcome to participate. This Single-Page-Application is able to display People, Rooms and the organization structure. It is also perfect to search for people in a company, get information where they sit in your building and how to contact them. :electric_plug: Technologie overview The project makes use of the following noteworthy frameworks: Frontend Frameworks Angular: The popular JavaScript framework is the base of this application. We also use the Angular routing for navigation to different views. Angular CLI: Makes development and the build process of the application much easier. It encapsulates the Webpack build configuration and provides some reasonable conventions to follow instead. The CLI also provides some convenient commands to generate new components, services, etc. Angular Material: Provides components to build an application with Google&#39;s Material design. We use it as a basis for our graphical layout. Backend Frameworks Traefik Nginx Docker :wave: New to the Phonebook? We are always searching for new contributors who want’s to be a part of a growing community. The contributions beneftis are huge. You can learn many about the above technologies, bring new ideas into the project and learn how it is to be an OpenSource-Developer. If you’re just getting started with the Phonebook, it’s recommend you to take a look on our getting-started page or take a look at our Board. We search people for many things. If you want to know how you can be a part of this community take a look at… If you’re a part of T-Systems you can also take a look at the internal get-started page. :mag: What are we searching? In this project can you contribute if you have different skills or if you want to evolve different techniques. First it’s recommend to check our current Issues. You want to contribute, but don’t know how or can’t find the right issue? Just contact us. We will find the right thing for you. Possible other things to help could be: Develop new Features Test the Application and suggest new enhancements or report new bugs Document different things around the software Design a cool Phonebook-Logo :sparkles: Need Help? coming soon :computer: Supported Browsers Browser Support Offline Capability Comment Chrome ✔ Working ✔ Working   FireFox ✔ Working ✖ Not Working (activate in ESR via Feature Flag or available from Firefox 61 upwards) There might be a Bug. Safari ✔ Working ✖ Not Supported yet Service Worker are not available yet: https://bugs.webkit.org/show_bug.cgi?id=174541 Edge ✔ Working ✖ Not Supported (available from Edge Version 17 upwards)   We do not support Internet Explorer. :page_with_curl: License This project is licensed under the MIT License - see the LICENSE file for details",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "8": {
    "id": "8",
    "title": "Infrastructure Guides",
    "content": ":gear: Infrastructure Guide Coming soon..",
    "url": "http://localhost:4000/docs/infrastructure-guides",
    "relUrl": "/docs/infrastructure-guides"
  },
  "9": {
    "id": "9",
    "title": "Release Guide",
    "content": ":tada: Release Guide Note: At the beginning you don’t really care about releases. How to release npm run release This runs the Semantic Release Plugin, which does: Analyzes the Commits since last release Generate the Version Number Generates the Release Notes Edits the source Code to include the version number and last commit Builds the NGINX Docker Image with the latest source Code Tags the version in Git",
    "url": "http://localhost:4000/docs/development-guides/release-guide.html",
    "relUrl": "/docs/development-guides/release-guide.html"
  },
  "10": {
    "id": "10",
    "title": "Theme Development",
    "content": ":rainbow: Theme development This documentation refers to theme developers. A good Guide about Material Theming can you find here. About Typography Angular Typography If you need the files you can get them from here. About Classes pb-spacer uses all the space given to him. Use it if you want to make room in between to &lt;div&gt;. pb-cursor activates the mouse cursor. Media Queries Media Queries are defined in media-queries.scss as Mixins, they are also defined as classes. You can feel free to use either of them. There is no other framework for managing media queries. Get the sample themes The source code for the prebuild themes you can find here. This can you use to get started with your own themes. For colors you can take view this file Develop your themes You can follow the theming guide from angular materials. You can write your scss by hand or you can produce it via this tool. Place your theme under the path src/styles/themes/{themename}.scss. Now add your theme to the src/styles/themes/themes.sccs. Important: You class name in the themes.sccs file must end with _theme. If you are done with your theme and have to test it set up the project as described in getting started or just contact a contributer of the project. There will be someone who can test it for you. Now you must insert your new Theme in src app shared models enumerables Theme.ts like the other ones. You also must edit the src/app/pages/settings/settings.component.ts. There you need to add your theme like the code here: case Theme.magenta_light_theme: { return this.i18n({ value: &#39;Magenta Light Theme&#39;, description: &#39;Color Theme Option: Magenta Light&#39;, id: &#39;SettingsComponentColorThemeMagentaLight&#39;, meaning: &#39;SettingsComponent&#39; }); } Don’t forget to run npm run extract-i18n for the internationalization. More information about you can find here. :tada: Finish with Pull Request :tada: If you finished and everything works you can open a pull request and wait for feedback from the maintainers. To set up a pull request follow the described steps here.",
    "url": "http://localhost:4000/docs/development-guides/theme-development",
    "relUrl": "/docs/development-guides/theme-development"
  },
  "11": {
    "id": "11",
    "title": "Translation Guide",
    "content": ":currency_exchange: Translation Guide The App should be available in different languages. This is the reason why we use Internationalization of Angular. Read the Guide to get more Information about it. For every English sentence or word is a translation saved under a specific ID. If you call the ID the app will check which language is set and return the right language. :hammer: How to use Use the Angular translation directive inside .html Files as described here. Use the Angular translation polyfill inside .ts Files as described here When you are finished working run npm run extract-i18n. This will update the translation files located under src i18n. Translate the files. Test if everything ok by running npm run start:$lang, for example: npm run start:en or npm run start:de. Predefined Message-ID’s :triangular_flag_on_post: Apart from all custom Translations, some strings are reoccurring. Please note them down here, or use them: For General Messages (with Action) use following IDs: @@ID value GeneralErrorMessage Something went wrong. Please try again. GeneralErrorMessageCopy Couldn’t copy to the clipboard, something went wrong. Try again. GeneralSuccessMessageCopy Copied to clipboard! GeneralResetButton Reset GeneralNotYetImplemented Sry, not yet implemented! GeneralCancelButton Cancel GeneralShowOnMapButton Show on Google-Maps GeneralUndoButton Undo For Language use: @@ID value GeneralLanguageEnglish English GeneralLanguageGerman German For Columns use: @@ID value ColumnTitlePicture Picture ColumnTitleId Id ColumnTitleName Name ColumnTitleEmail Email ColumnTitlePhone Phone ColumnTitleMobile Mobile ColumnTitleRole Role ColumnTitleCity City ColumnTitleOrgUnit Organization Unit ColumnTitleRoom Room ColumnTitleBuilding Building ColumnTitleCostcenter Costcenter For Datapoints (Labels) use: @@ID value DataPersonFax Fax DataPersonType Type DataPersonDirectSupervisor Direct Supervisor DataPersonTeamAssistant Team Assistants DataPersonFloor Floor DataPersonFloorPlural Floors DataLocationContactPerson Contact Person DataLocationAddress Address DataLocationContact Contact",
    "url": "http://localhost:4000/docs/development-guides/translation-guide.html",
    "relUrl": "/docs/development-guides/translation-guide.html"
  }
  
}
