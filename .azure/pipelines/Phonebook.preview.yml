pr: 
  branches:
    include:
      - master

variables:
  image_repo: danielhabenicht/phonebook
  image_tag: pr-$(Build.SourceBranchName) 
  helm_artifact_name: HelmPhonebookPackage

stages:
# Build All Containers needed for the preview
# Currently this is only the Phonebook.Frontend
- stage: build
  jobs:
    - job: phonebook_frontend
      condition: false    
      displayName: 'Phonebook Frontend'
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - task: UseNode@1
        inputs:
          version: '11.x'

      - script: node version.js $(Build.SourceBranchName) $(Build.SourceVersion) $(Build.SourceVersion)
        displayName: 'Write Version Number'    
        workingDirectory: 'Phonebook.Frontend/'

      - script: docker build -t $(image_repo):$(image_tag) .
        displayName: 'Build Image'              
        workingDirectory: 'Phonebook.Frontend/'
      
      - script: |
          docker login -u $DOCKER_REGISTRY_USER -p $(DOCKER_REGISTRY_PASSWORD)
          docker push $(image_repo):$(image_tag)
        workingDirectory: 'Phonebook.Frontend/'
        displayName: 'Push Image'                      
        env:
          DOCKER_REGISTRY_PASSWORD: $(DOCKER_REGISTRY_PASSWORD)
          DOCKER_REGISTRY_USER: $(DOCKER_REGISTRY_USER)

    - job: phonebook
      displayName: Phonebook
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - task: HelmInstaller@1
        inputs:
          helmVersionToInstall: 'latest'
      - script: helm dep update
        workingDirectory: 'Phonebook/phonebook/'
      - task: HelmDeploy@0
        displayName: Helm package
        inputs:
          command: package
          chartPath: Phonebook/phonebook
          destination: $(Build.ArtifactStagingDirectory)
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: $(helm_artifact_name)

- stage: deploy
  dependsOn: build
  jobs:
    - job: deploy_preview
      displayName: 'Deploy Preview' 
      pool:
        vmImage: 'ubuntu-16.04'
      variables:
        namespace: $(Build.SourceBranchName)
      steps:
      - download: current
        artifact: $(helm_artifact_name)

      - task: HelmInstaller@0
        displayName: 'Install Helm 2.14.2'
        inputs:
          helmVersion: 2.14.2
      
      - task: AzureCLI@1
        displayName: 'Azure CLI '
        inputs:
          azureSubscription: 'Visual Studio Enterprise â€“ MPN (44678328-75c5-4e48-92c0-b2ab31d5166c)'
          scriptLocation: inlineScript
          inlineScript: |
            az network public-ip create \
                --resource-group MC_t-systems-mms-phonebook-kub_Phonebook Kubernetes Demo Cluster_northeurope\
                --name $()_public_ip\
                --allocation-method static

      - task: Kubernetes@1
        displayName: 'Create Namespace'
        inputs:
          kubernetesServiceEndpoint: 'Phonebook Kubernetes Demo Cluster'
          namespace: 'kube-public'
          command: create
          arguments: 'namespace $(namespace)'
            
      - task: HelmDeploy@0
        displayName: 'helm init'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: 'Phonebook Kubernetes Demo Cluster'
          namespace: $(namespace)
          command: init
          arguments: '--service-account tiller --node-selectors "beta.kubernetes.io/os"="linux"'
          tillerNamespace: $(namespace)

      - task: HelmDeploy@0
        displayName: 'helm upgrade'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: 'Phonebook Kubernetes Demo Cluster'
          namespace: $(namespace)
          command: upgrade
          chartType: FilePath
          chartPath: '$(Pipeline.Workspace)/$(helm_artifact_name)/phonebook-0.1.0.tgz'
          releaseName: phonebook
          overrideValues: 'frontend.image.tag=$(image_tag),frontend.image.repository=danielhabenicht,frontend.image.name=phonebook'
          valueFile: 'Phonebook.Demo/values.yml'
          recreate: true
          tillerNamespace: $(namespace)

      - task: Kubernetes@1
        displayName: 'kubectl create assets'
        inputs:
          kubernetesServiceEndpoint: 'Phonebook Kubernetes Demo Cluster'
          namespace: 'kube-public'
          command: apply
          arguments: '-f https://raw.githubusercontent.com/T-Systems-MMS/phonebook/master/Phonebook.Demo/Phonebook.Assets.yml'

      - task: Kubernetes@1
        displayName: 'kubectl create mockBackend '
        inputs:
          kubernetesServiceEndpoint: 'Phonebook Kubernetes Demo Cluster'
          namespace: 'kube-public'
          command: apply
          arguments: '-f https://raw.githubusercontent.com/T-Systems-MMS/phonebook/master/Phonebook.Demo/Phonebook.MockBackend.yml'

- stage: delete
  dependsOn: deploy
  jobs:
  - job: delay
    timeoutInMinutes: 720
    cancelTimeoutInMinutes: 720
    pool: server
    steps:
      - task: Delay@1
        inputs:
          delayForMinutes: '720' 
      - task: Kubernetes@1
        displayName: 'Delete Namespace'
        inputs:
          kubernetesServiceEndpoint: 'Phonebook Kubernetes Demo Cluster'
          namespace: 'kube-public'
          command: delete
          arguments: 'namespace $(namespace)'