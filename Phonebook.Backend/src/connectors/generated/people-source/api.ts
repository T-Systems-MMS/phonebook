// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import { Agent } from 'https';
import * as globalImportUrl from 'url';
import { BaseAPI, BASE_PATH, RequestArgs, RequiredError } from './base';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface Branch
 */
export interface Branch {
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  ContactPerson?: string;
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  LinkRoutingWebsite?: string;
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  ReceptionFax?: string;
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  Description?: string;
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  ReceptionPhone?: string;
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  LinkPicture?: string;
  /**
   *
   * @type {string}
   * @memberof Branch
   */
  LinkRoutingInfo?: string;
  /**
   *
   * @type {BranchCity}
   * @memberof Branch
   */
  City?: BranchCity;
  /**
   *
   * @type {Array<BranchRoomCollection>}
   * @memberof Branch
   */
  RoomCollection?: Array<BranchRoomCollection>;
}
/**
 *
 * @export
 * @interface BranchCity
 */
export interface BranchCity {
  /**
   *
   * @type {string}
   * @memberof BranchCity
   */
  Building?: string;
  /**
   *
   * @type {string}
   * @memberof BranchCity
   */
  ZipCode?: string;
  /**
   *
   * @type {string}
   * @memberof BranchCity
   */
  Name?: string;
}
/**
 *
 * @export
 * @interface BranchRoomCollection
 */
export interface BranchRoomCollection {
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  Building?: string;
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  Floor?: string;
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  Description?: string;
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  Number?: string;
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  Phone?: string;
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  FloorPlan?: string;
  /**
   *
   * @type {number}
   * @memberof BranchRoomCollection
   */
  Id?: number;
  /**
   *
   * @type {number}
   * @memberof BranchRoomCollection
   */
  BuildingId?: number;
  /**
   *
   * @type {string}
   * @memberof BranchRoomCollection
   */
  Place?: string;
}
/**
 *
 * @export
 * @interface Person
 */
export interface Person {
  /**
   *
   * @type {string}
   * @memberof Person
   */
  Type?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  Id?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  Firstname?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  Surname?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  Title?: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  Role?: string;
  /**
   *
   * @type {boolean}
   * @memberof Person
   */
  Picture?: boolean;
  /**
   *
   * @type {PersonContacts}
   * @memberof Person
   */
  Contacts?: PersonContacts;
  /**
   *
   * @type {PersonLocation}
   * @memberof Person
   */
  Location?: PersonLocation;
  /**
   *
   * @type {PersonBusiness}
   * @memberof Person
   */
  Business?: PersonBusiness;
}
/**
 *
 * @export
 * @interface PersonBusiness
 */
export interface PersonBusiness {
  /**
   *
   * @type {Array<string>}
   * @memberof PersonBusiness
   */
  OrgUnit?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PersonBusiness
   */
  Supervisor?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof PersonBusiness
   */
  Costcenter?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof PersonBusiness
   */
  ShortSupervisor?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PersonBusiness
   */
  BusinessunitTeamassistent?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PersonBusiness
   */
  ShortBusinessunitTeamassistent?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PersonBusiness
   */
  ShortOrgUnit?: Array<string>;
}
/**
 *
 * @export
 * @interface PersonContacts
 */
export interface PersonContacts {
  /**
   *
   * @type {string}
   * @memberof PersonContacts
   */
  Email?: string;
  /**
   *
   * @type {string}
   * @memberof PersonContacts
   */
  Phone?: string;
  /**
   *
   * @type {PersonContactsMessenger}
   * @memberof PersonContacts
   */
  Messenger?: PersonContactsMessenger;
  /**
   *
   * @type {string}
   * @memberof PersonContacts
   */
  Fax?: string;
  /**
   *
   * @type {string}
   * @memberof PersonContacts
   */
  Mobile?: string;
}
/**
 *
 * @export
 * @interface PersonContactsMessenger
 */
export interface PersonContactsMessenger {
  /**
   *
   * @type {number}
   * @memberof PersonContactsMessenger
   */
  State?: number;
  /**
   *
   * @type {string}
   * @memberof PersonContactsMessenger
   */
  Text?: string;
}
/**
 *
 * @export
 * @interface PersonLocation
 */
export interface PersonLocation {
  /**
   *
   * @type {Array<PersonLocationRoomCollection>}
   * @memberof PersonLocation
   */
  RoomCollection?: Array<PersonLocationRoomCollection>;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  LinkRoutingWebsite?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  Description?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  ReceptionFax?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  ReceptionPhone?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  LinkPicture?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  LinkRoutingInfo?: string;
  /**
   *
   * @type {PersonLocationCity}
   * @memberof PersonLocation
   */
  City?: PersonLocationCity;
  /**
   *
   * @type {string}
   * @memberof PersonLocation
   */
  ContactPerson?: string;
}
/**
 *
 * @export
 * @interface PersonLocationCity
 */
export interface PersonLocationCity {
  /**
   *
   * @type {string}
   * @memberof PersonLocationCity
   */
  Building?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationCity
   */
  Name?: string;
}
/**
 *
 * @export
 * @interface PersonLocationRoomCollection
 */
export interface PersonLocationRoomCollection {
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  Building?: string;
  /**
   *
   * @type {number}
   * @memberof PersonLocationRoomCollection
   */
  Floor?: number;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  Description?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  Number?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  Phone?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  FloorPlan?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  Id?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  BuildingId?: string;
  /**
   *
   * @type {string}
   * @memberof PersonLocationRoomCollection
   */
  Place?: string;
}
/**
 *
 * @export
 * @interface Room
 */
export interface Room {
  /**
   *
   * @type {string}
   * @memberof Room
   */
  Building?: string;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  BuildingId?: number;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  Description?: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  Floor?: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  FloorPlan?: string;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  Id?: number;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  Number?: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  Phone?: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  Place?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     * Get all `Branch`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchesGet(options: any = {}): RequestArgs {
      const localVarPath = `/branches`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get one `Branch` with given id.
     * @param {number} id ID of a &#x60;Branch&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchesIdGet(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling branchesIdGet.');
      }
      const localVarPath = `/branches/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get one `Person` with given id.
     * @param {number} id ID of a &#x60;Person&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    personIdGet(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling personIdGet.');
      }
      const localVarPath = `/person/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get all `Person`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    personsGet(options: any = {}): RequestArgs {
      const localVarPath = `/persons`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get all `Room`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomsGet(options: any = {}): RequestArgs {
      const localVarPath = `/rooms`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get one `Room` with given id.
     * @param {number} id ID of a &#x60;Room&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomsIdGet(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling roomsIdGet.');
      }
      const localVarPath = `/rooms/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
     * Get all `Branch`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Branch>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).branchesGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get one `Branch` with given id.
     * @param {number} id ID of a &#x60;Branch&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchesIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).branchesIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get one `Person` with given id.
     * @param {number} id ID of a &#x60;Person&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    personIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).personIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all `Person`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    personsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).personsGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const agent = new Agent({
          rejectUnauthorized: false
        });
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
          httpsAgent: agent
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get all `Room`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Room>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).roomsGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get one `Room` with given id.
     * @param {number} id ID of a &#x60;Room&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).roomsIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     * Get all `Branch`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchesGet(options?: any) {
      return DefaultApiFp(configuration).branchesGet(options)(axios, basePath);
    },
    /**
     * Get one `Branch` with given id.
     * @param {number} id ID of a &#x60;Branch&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchesIdGet(id: number, options?: any) {
      return DefaultApiFp(configuration).branchesIdGet(id, options)(axios, basePath);
    },
    /**
     * Get one `Person` with given id.
     * @param {number} id ID of a &#x60;Person&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    personIdGet(id: number, options?: any) {
      return DefaultApiFp(configuration).personIdGet(id, options)(axios, basePath);
    },
    /**
     * Get all `Person`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    personsGet(options?: any) {
      return DefaultApiFp(configuration).personsGet(options)(axios, basePath);
    },
    /**
     * Get all `Room`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomsGet(options?: any) {
      return DefaultApiFp(configuration).roomsGet(options)(axios, basePath);
    },
    /**
     * Get one `Room` with given id.
     * @param {number} id ID of a &#x60;Room&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomsIdGet(id: number, options?: any) {
      return DefaultApiFp(configuration).roomsIdGet(id, options)(axios, basePath);
    }
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Get all `Branch`.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public branchesGet(options?: any) {
    return DefaultApiFp(this.configuration).branchesGet(options)(this.axios, this.basePath);
  }

  /**
   * Get one `Branch` with given id.
   * @param {number} id ID of a &#x60;Branch&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public branchesIdGet(id: number, options?: any) {
    return DefaultApiFp(this.configuration).branchesIdGet(id, options)(this.axios, this.basePath);
  }

  /**
   * Get one `Person` with given id.
   * @param {number} id ID of a &#x60;Person&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public personIdGet(id: number, options?: any) {
    return DefaultApiFp(this.configuration).personIdGet(id, options)(this.axios, this.basePath);
  }

  /**
   * Get all `Person`.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public personsGet(options?: any) {
    return DefaultApiFp(this.configuration).personsGet(options)(this.axios, this.basePath);
  }

  /**
   * Get all `Room`.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public roomsGet(options?: any) {
    return DefaultApiFp(this.configuration).roomsGet(options)(this.axios, this.basePath);
  }

  /**
   * Get one `Room` with given id.
   * @param {number} id ID of a &#x60;Room&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public roomsIdGet(id: number, options?: any) {
    return DefaultApiFp(this.configuration).roomsIdGet(id, options)(this.axios, this.basePath);
  }
}
